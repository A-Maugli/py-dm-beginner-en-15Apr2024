#pragma version 10

smart_contracts.digital_marketplace.contract.DigitalMarketplace.approval_program:
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(arc4.ARC4Contract):
    method "create_application(asset,uint64)void"
    method "set_price(uint64)void"
    method "opt_in_to_asset(pay,asset)void"
    method "buy(pay,uint64,asset)void"
    method "withdraw(asset)void"
    txna ApplicationArgs 0
    match main_create_application_route@1 main_set_price_route@2 main_opt_in_to_asset_route@3 main_buy_route@4 main_withdraw_route@5
    err // reject transaction

main_create_application_route@1:
    // smart_contracts/digital_marketplace/contract.py:9
    // @arc4.abimethod(allow_actions=["NoOp"], create=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    // smart_contracts/digital_marketplace/contract.py:9
    // @arc4.abimethod(allow_actions=["NoOp"], create=True)
    callsub create_application
    int 1
    return

main_set_price_route@2:
    // smart_contracts/digital_marketplace/contract.py:14
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/digital_marketplace/contract.py:14
    // @arc4.abimethod
    callsub set_price
    int 1
    return

main_opt_in_to_asset_route@3:
    // smart_contracts/digital_marketplace/contract.py:20
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:20
    // @arc4.abimethod
    callsub opt_in_to_asset
    int 1
    return

main_buy_route@4:
    // smart_contracts/digital_marketplace/contract.py:42
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:42
    // @arc4.abimethod
    callsub buy
    int 1
    return

main_withdraw_route@5:
    // smart_contracts/digital_marketplace/contract.py:62
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:5
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/digital_marketplace/contract.py:62
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    callsub withdraw
    int 1
    return


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.create_application(asset_to_sell: uint64, unitary_price: bytes) -> void:
create_application:
    // smart_contracts/digital_marketplace/contract.py:9-10
    // @arc4.abimethod(allow_actions=["NoOp"], create=True)
    // def create_application(self, asset_to_sell: pup.Asset, unitary_price: arc4.UInt64) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:11
    // self.asset_id.value = asset_to_sell.asset_id
    byte "asset_id"
    frame_dig -2
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:12
    // self.unitary_price.value = unitary_price.decode()
    frame_dig -1
    btoi
    byte "unitary_price"
    swap
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.set_price(unitary_price: bytes) -> void:
set_price:
    // smart_contracts/digital_marketplace/contract.py:14-15
    // @arc4.abimethod
    // def set_price(self, unitary_price: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:16
    // assert pup.Txn.sender == pup.Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:18
    // self.unitary_price.value = unitary_price.decode()
    frame_dig -1
    btoi
    byte "unitary_price"
    swap
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.opt_in_to_asset(mbr_pay: uint64, asset_to_sell: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/digital_marketplace/contract.py:20-23
    // @arc4.abimethod
    // def opt_in_to_asset(
    //     self, mbr_pay: pup.gtxn.PaymentTransaction, asset_to_sell: pup.Asset
    // ) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:24
    // assert pup.Txn.sender == pup.Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:26
    // pup.Global.current_application_address, self.asset_id.value
    global CurrentApplicationAddress
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check value exists
    // smart_contracts/digital_marketplace/contract.py:25-27
    // _balance, opted_into = pup.op.AssetHoldingGet.asset_balance(
    //     pup.Global.current_application_address, self.asset_id.value
    // )
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/digital_marketplace/contract.py:28
    // assert not opted_into
    !
    assert
    // smart_contracts/digital_marketplace/contract.py:30
    // assert mbr_pay.receiver == pup.Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:32
    // mbr_pay.amount
    frame_dig -2
    gtxns Amount
    // smart_contracts/digital_marketplace/contract.py:33
    // == pup.Global.min_balance + pup.Global.asset_opt_in_min_balance
    global MinBalance
    global AssetOptInMinBalance
    +
    // smart_contracts/digital_marketplace/contract.py:32-33
    // mbr_pay.amount
    // == pup.Global.min_balance + pup.Global.asset_opt_in_min_balance
    ==
    // smart_contracts/digital_marketplace/contract.py:31-34
    // assert (
    //     mbr_pay.amount
    //     == pup.Global.min_balance + pup.Global.asset_opt_in_min_balance
    // )
    assert
    // smart_contracts/digital_marketplace/contract.py:36-40
    // pup.itxn.AssetTransfer(
    //     xfer_asset=self.asset_id.value,
    //     asset_receiver=pup.Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:38
    // asset_receiver=pup.Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:37
    // xfer_asset=self.asset_id.value,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check value exists
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:36
    // pup.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    itxn_field AssetReceiver
    // smart_contracts/digital_marketplace/contract.py:39
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    // smart_contracts/digital_marketplace/contract.py:36-40
    // pup.itxn.AssetTransfer(
    //     xfer_asset=self.asset_id.value,
    //     asset_receiver=pup.Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy(buyer_txn: uint64, quantity: bytes, asset_to_buy: uint64) -> void:
buy:
    // smart_contracts/digital_marketplace/contract.py:42-48
    // @arc4.abimethod
    // def buy(
    //     self,
    //     buyer_txn: pup.gtxn.PaymentTransaction,
    //     quantity: arc4.UInt64,
    //     asset_to_buy: pup.Asset,
    // ) -> None:
    proto 3 0
    // smart_contracts/digital_marketplace/contract.py:49
    // assert self.unitary_price.value != pup.UInt64(0)
    int 0
    byte "unitary_price"
    app_global_get_ex
    assert // check value exists
    int 0
    !=
    assert
    // smart_contracts/digital_marketplace/contract.py:51
    // decoded_quantity = quantity.decode()
    frame_dig -2
    btoi
    // smart_contracts/digital_marketplace/contract.py:52
    // assert buyer_txn.sender == pup.Txn.sender
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:53
    // assert buyer_txn.receiver == pup.Global.current_application_address
    frame_dig -3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:54
    // assert buyer_txn.amount == self.unitary_price.value * decoded_quantity
    frame_dig -3
    gtxns Amount
    int 0
    byte "unitary_price"
    app_global_get_ex
    assert // check value exists
    dig 2
    *
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:56-60
    // pup.itxn.AssetTransfer(
    //     xfer_asset=self.asset_id.value,
    //     asset_receiver=pup.Txn.sender,
    //     asset_amount=decoded_quantity,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:58
    // asset_receiver=pup.Txn.sender,
    txn Sender
    // smart_contracts/digital_marketplace/contract.py:57
    // xfer_asset=self.asset_id.value,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check value exists
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:56
    // pup.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    itxn_field AssetReceiver
    itxn_field AssetAmount
    // smart_contracts/digital_marketplace/contract.py:56-60
    // pup.itxn.AssetTransfer(
    //     xfer_asset=self.asset_id.value,
    //     asset_receiver=pup.Txn.sender,
    //     asset_amount=decoded_quantity,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.withdraw(asset_to_withdraw: uint64) -> void:
withdraw:
    // smart_contracts/digital_marketplace/contract.py:62-63
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def withdraw(self, asset_to_withdraw: pup.Asset) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:64
    // assert pup.Txn.sender == pup.Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:66-71
    // pup.itxn.AssetTransfer(
    //     xfer_asset=self.asset_id.value,
    //     asset_receiver=pup.Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=pup.Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:70
    // asset_close_to=pup.Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:68
    // asset_receiver=pup.Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:67
    // xfer_asset=self.asset_id.value,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check value exists
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:66
    // pup.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    itxn_field AssetReceiver
    itxn_field AssetCloseTo
    // smart_contracts/digital_marketplace/contract.py:69
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    // smart_contracts/digital_marketplace/contract.py:66-71
    // pup.itxn.AssetTransfer(
    //     xfer_asset=self.asset_id.value,
    //     asset_receiver=pup.Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=pup.Global.creator_address,
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:73-77
    // pup.itxn.Payment(
    //     receiver=pup.Global.creator_address,
    //     amount=0,
    //     close_remainder_to=pup.Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:76
    // close_remainder_to=pup.Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:74
    // receiver=pup.Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:73
    // pup.itxn.Payment(
    int pay
    itxn_field TypeEnum
    itxn_field Receiver
    itxn_field CloseRemainderTo
    // smart_contracts/digital_marketplace/contract.py:75
    // amount=0,
    int 0
    itxn_field Amount
    // smart_contracts/digital_marketplace/contract.py:73-77
    // pup.itxn.Payment(
    //     receiver=pup.Global.creator_address,
    //     amount=0,
    //     close_remainder_to=pup.Global.creator_address,
    // ).submit()
    itxn_submit
    retsub
